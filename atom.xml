<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乱序的博客</title>
  
  <subtitle>LuanXu&#39;s Blog</subtitle>
  <link href="https://luanxu.me/atom.xml" rel="self"/>
  
  <link href="https://luanxu.me/"/>
  <updated>2021-08-31T15:15:25.315Z</updated>
  <id>https://luanxu.me/</id>
  
  <author>
    <name>LuanXu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>让前端自定义查询条件和分页</title>
    <link href="https://luanxu.me/posts/45583/"/>
    <id>https://luanxu.me/posts/45583/</id>
    <published>2021-08-31T13:52:53.000Z</published>
    <updated>2021-08-31T15:15:25.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>作为一名后端在做Web后端业务开发时，都应该遵循以下规则</p><ul><li>降低代码耦合度</li><li>尽量避免代码冗余</li></ul><p>在使用RESTFUL API风格开发时，几乎所有方法为 <code>GET</code> 的 <strong>列表或详情</strong> 接口</p><p>都不可避免的需要用到 <code>分页</code>、<code>查询筛选条件</code>、<code>自定义排序</code> 的功能</p><p>假如我们为每个接口去分别开发以上三种功能，将会耗费大量时间</p><hr><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ul><li>相同的功能，代码相似度高</li><li>当后端开发完成后，需要修改<code>查询筛选条件</code>时，前端无法及时反馈，需要等后端发布测试</li></ul><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>很多后端都会将 <code>查询筛选条件</code> 、 <code>自定义排序</code> 做成参数查询</p><p>但是 <code>查询筛选条件</code> 则要一个个写接收请求参数并且去调用 <em><strong>where/orwhere/like/where i…</strong></em> 等方法去挨个处理</p><p>那要如何把选择权和控制权交给前端同事呢？<br>我们可以给所有接口<strong>获取列表</strong>的封装个方法</p><p>在这里使用的是 <code>Gin</code>+<code>Gorm</code> 的例子，其他框架也可以使用类似操作解决这样的问题</p><hr><h3 id="自定义分页"><a href="#自定义分页" class="headerlink" title="自定义分页"></a>自定义分页</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Paging</span><span class="params">(c *gin.Context, db *gorm.DB)</span> <span class="params">(db *gorm.DB, err error)</span></span> &#123;</span><br><span class="line">limitStr := c.Request.FormValue(<span class="string">&quot;limit&quot;</span>)</span><br><span class="line">    pageStr := c.Request.FormValue(<span class="string">&quot;page&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> limitStr == <span class="string">&quot;&quot;</span> || pageStr == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">    limit, err := strconv.Atoi(limitStr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    page, err := strconv.Atoi(pageStr)</span><br><span class="line">     <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    db = db.Offset((page - <span class="number">1</span>) * limit).Limit(limit)</span><br><span class="line"><span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sort</span><span class="params">(c *gin.Context, db *gorm.DB)</span> *<span class="title">gorm</span>.<span class="title">DB</span></span> &#123;</span><br><span class="line">orderBy := c.Request.FormValue(<span class="string">&quot;order_by&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> orderBy == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> db</span><br><span class="line">    &#125;</span><br><span class="line">    order := c.Request.FormValue(<span class="string">&quot;order&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> order != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        db = db.Order(orderBy + <span class="string">&quot; &quot;</span> + order)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        db = db.Order(orderBy + <span class="string">&quot; DESC&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义查询筛选条件"><a href="#自定义查询筛选条件" class="headerlink" title="自定义查询筛选条件"></a>自定义查询筛选条件</h3><p>分页和自定义排序功能就不做解释了，做过web后端基本都了解了</p><p><code>按照field_查询操作符_字段名的格式前端请求的query参数中提取并添加查询条件</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照field_查询操作符_字段名的格式前端请求的query参数中提取并添加查询条件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConditionSupport</span><span class="params">(c *gin.Context, db *gorm.DB)</span> <span class="params">(*gorm.DB, error)</span></span> &#123;</span><br><span class="line">query, err := url.ParseQuery(c.Request.URL.RawQuery)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(err, <span class="string">&quot;请求参数不正确，请联系管理员进行处理&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 找出所有带有field开头的，并且字符串长度大于9的query参数</span></span><br><span class="line"><span class="keyword">for</span> name, value := <span class="keyword">range</span> query &#123;</span><br><span class="line">        <span class="keyword">if</span> !strings.HasPrfix(name, <span class="string">&quot;field&quot;</span>) || <span class="built_in">len</span>(name) &lt;= <span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> db,<span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        fieldName := name[<span class="number">9</span>:]</span><br><span class="line">        <span class="comment">//取出操作符</span></span><br><span class="line">        opt := name[<span class="number">6</span>:<span class="number">8</span>]</span><br><span class="line">        <span class="keyword">switch</span> opt &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;eq&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(value) == <span class="number">1</span> &#123;</span><br><span class="line">                db = db.Where(fieldName+<span class="string">&quot;=?&quot;</span>, value[<span class="number">0</span>])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                db = db.Where(fieldName+<span class="string">&quot; IN (?)&quot;</span>, value)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ne&quot;</span>:</span><br><span class="line">            db = db.Where(fieldName+<span class="string">&quot;&lt;&gt;?&quot;</span>, value[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;lt&quot;</span>:</span><br><span class="line">            db = db.Where(fieldName+<span class="string">&quot;&lt;?&quot;</span>, value[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;le&quot;</span>:</span><br><span class="line">            db = db.Where(fieldName+<span class="string">&quot;&lt;=?&quot;</span>, value[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;gt&quot;</span>:</span><br><span class="line">            db = db.Where(fieldName+<span class="string">&quot;&gt;?&quot;</span>, value[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ge&quot;</span>:</span><br><span class="line">            db = db.Where(fieldName+<span class="string">&quot;&gt;=?&quot;</span>, value[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;lk&quot;</span>:</span><br><span class="line">            db = db.Where(fieldName+<span class="string">&quot; LIKE ?&quot;</span>, <span class="string">&quot;%&quot;</span>+value[<span class="number">0</span>]+<span class="string">&quot;%&quot;</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;不支持的条件查询操作&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结合三种方法一起使用"><a href="#结合三种方法一起使用" class="headerlink" title="结合三种方法一起使用"></a>结合三种方法一起使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Find</span><span class="params">(c *gin.Context, db *gorm.DB, result *<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(<span class="keyword">int64</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> count <span class="keyword">int64</span></span><br><span class="line">err := c.Request.ParseForm()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">&quot;参数不正确&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 添加自定义查询条件</span></span><br><span class="line">db, err = ConditionSupport(c, db)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">&quot;查询条件有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 添加分页支持</span></span><br><span class="line">db, err = Paging(c, db)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">&quot;分页参数不正确&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">err = db.Count(&amp;count).Error</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">&quot;数据库记录统计失败，请稍后再试&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 添加自定义排序</span></span><br><span class="line">err = Sort(c, db).Find(result).Error</span><br><span class="line"><span class="keyword">return</span> count, errors.New(<span class="string">&quot;数据库记录查询失败，请稍后再试&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们只需要给每个需要 <code>分页</code>、<code>查询筛选条件</code>、<code>自定义排序</code> 的地方使用Find函数便可以将操作权交给前端了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h2&gt;&lt;p&gt;作为一名后端在做Web后端业务开发时，都应该遵循以下规则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;降低代码耦合度&lt;/li&gt;
&lt;li&gt;尽量避</summary>
      
    
    
    
    <category term="技术" scheme="https://luanxu.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Golang" scheme="https://luanxu.me/categories/%E6%8A%80%E6%9C%AF/Golang/"/>
    
    
    <category term="Gorm" scheme="https://luanxu.me/tags/Gorm/"/>
    
    <category term="Gin" scheme="https://luanxu.me/tags/Gin/"/>
    
    <category term="Full Stack" scheme="https://luanxu.me/tags/Full-Stack/"/>
    
  </entry>
  
  <entry>
    <title>JSON.stringify中的replacer</title>
    <link href="https://luanxu.me/posts/29099/"/>
    <id>https://luanxu.me/posts/29099/</id>
    <published>2021-08-25T05:00:32.000Z</published>
    <updated>2021-08-31T15:15:25.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>当我们在遇到需要深拷贝一个对象所有属性的时候<br>会想把关联的数据排除在外，例如这样的一个对象关联的send_by_user</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">41</span>,</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;消息标题&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;消息内容&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;send_by&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;send_by_user&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;guoguixin&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;telephone&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;10000@qq.com&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;department_id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;department_name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;department&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;产品设计部&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;created_at&quot;</span>: <span class="string">&quot;1970-01-01T08:00:00+08:00&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;updated_at&quot;</span>: <span class="string">&quot;2021-08-21T16:12:05+08:00&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;info&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span>: <span class="string">&quot;1970-01-01T08:00:00+08:00&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;updated_at&quot;</span>: <span class="string">&quot;1970-01-01T08:00:00+08:00&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;send_to&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;created_at&quot;</span>: <span class="string">&quot;2021-08-21T16:55:53+08:00&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;deleted_at&quot;</span>: <span class="string">&quot;0001-01-01T00:00:00Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;updated_at&quot;</span>: <span class="string">&quot;2021-08-25T10:14:57+08:00&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你的需求是修改这个对象并且整体提交更新的时候会发现以下问题</p><ol><li>这个多余关联的对象不需要提交</li><li>发出请求的数据量变大</li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>控制 JSON.stringify 序列化层级<br><code>JSON.stringify(value[, replacer [, space]])</code></p><p>使用JSON.stringify时传入第二个参数</p><ul><li>replacer 可选<br>如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为 null 或者未提供，则对象所有的属性都会被序列化。</li></ul><p>那我们只需要通过replacer传入函数过滤掉属性值是Object即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(message,<span class="function">(<span class="params">k,v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// k,v分别代表传入对象的属性名和属性值</span></span><br><span class="line">    <span class="comment">// 判断k是因为replace会传入一个 传入参数对象 的值,但是没有k, 我们直接返回即可</span></span><br><span class="line">    <span class="keyword">if</span>(k) &#123;</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> v === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">MDN Web Docs</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h2&gt;&lt;p&gt;当我们在遇到需要深拷贝一个对象所有属性的时候&lt;br&gt;会想把关联的数据排除在外，例如这样的一个对象关联的send_by_use</summary>
      
    
    
    
    <category term="技术" scheme="https://luanxu.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="JavaScript" scheme="https://luanxu.me/categories/%E6%8A%80%E6%9C%AF/JavaScript/"/>
    
    
  </entry>
  
</feed>
